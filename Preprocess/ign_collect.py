"""
platform: win
env: any
name: ign_collect.py
reform pdb dataset on windows
"""
import os

from config import *
from DatasetMng.IndexMng import get_index_from_file
from rdkit import Chem
import pickle

sub_sets = ['test', 'train', 'valid']


def get_protein_file_by_id(i):
    """
    all proteins needed are included in pdbbind 2016, either in core or in refined or in general-minus-refined
    :param i: protein ID
    :return: protein file dir
    """
    if i in os.listdir(core_dir):
        return os.path.join(core_dir, i, "{}_protein.pdb".format(i))
    if i in os.listdir(refined_dir):
        return os.path.join(refined_dir, i, "{}_protein.pdb".format(i))
    if i in os.listdir(general_except_refined_dir):
        return os.path.join(general_except_refined_dir, i, "{}_protein.pdb".format(i))
    print("warning index: {} not found".format(i))


def get_ligand_file_by_id(i):
    """
    all ligands needed are included in pdbbind 2016, either in core or in refined or in general-minus-refined
    :param i: ligand ID
    :return: ligand file dir
    """
    if i in os.listdir(core_dir):
        return os.path.join(core_dir, i, "{}_ligand.sdf".format(i))
    if i in os.listdir(refined_dir):
        return os.path.join(refined_dir, i, "{}_ligand.sdf".format(i))
    if i in os.listdir(general_except_refined_dir):
        return os.path.join(general_except_refined_dir, i, "{}_ligand.sdf".format(i))
    print("warning index: {} not found".format(i))


def get_index():
    """
    get all the protein IDs needed for IGN
    :return: index list
    """
    return [get_index_from_file((os.path.join(ign_index_dir, "{}.index.txt".format(f)))) for f in sub_sets]


def prepare_scripts(i, input_base, output_base):
    """
    for a protein-ligand pair, a python script is generated for providing pocket for it
    :param i: protein ID
    :param input_base:  the base dir of protein-ligand pair,
                        but not needed here because it is already defined in config.py
    :param output_base: generated script
    :return:
    """
    protein_file = get_protein_file_by_id(i)
    ligand_file = get_ligand_file_by_id(i)
    pocket_file = os.path.join(output_base, "pockets", "{}_pocket.pdb".format(i))
    script_file = os.path.join(output_base, "scripts", "{}_script.py".format(i))
    script_content = "from chimera import runCommand \n"
    script_content += "runCommand('open 0 {}') \n".format(ligand_file)
    script_content += "runCommand('open 1 {}') \n".format(protein_file)
    script_content += "runCommand('select #1 & #0 z < 10') \n"
    script_content += "runCommand('write format pdb selected 1 {}') \n".format(pocket_file)
    script_content += "runCommand('close 0') \n"
    script_content += "runCommand('close 1')"
    with open(script_file, 'w') as f:
        f.write(script_content.replace("\\", "\\\\"))


def prepare_single_complex_from_pocket_by_index(i, input_base, output_base):
    """
    prepare a single complex file for pocket-ligand pair, as the IGN input,
    make sure that pocket files are generated by chimera_run_ign.py first
    :param i: protein ID
    :param input_base:  the base dir of protein-ligand pair,
                        but not needed here because it is already defined in config.py
    :param output_base: generated complex
    :return:
    """
    ligand_file = get_ligand_file_by_id(i)
    pocket_file = os.path.join(output_base, "pockets", "{}_pocket.pdb".format(i))
    try:
        ligand = Chem.MolFromMolFile(ligand_file)
        pocket = Chem.MolFromPDBFile(pocket_file)
        complex_file = os.path.join(output_base, "complexes", i)
        with open(complex_file, 'wb') as f:
            pickle.dump([ligand, pocket], f)
    except:
        print("complex {} generation failed...".format(i))


def prepare_scripts_dir(input_base, output_base):
    for name in os.listdir(input_base):
        prepare_scripts(name, input_base=input_base, output_base=output_base)


def prepare_single_complex_from_pocket_by_index_dir(input_base, output_base):
    for name in os.listdir(input_base):
        prepare_single_complex_from_pocket_by_index(name, input_base=input_base, output_base=output_base)


def prepare_scripts_ign():
    """

    :return:
    """
    print('\n')
    ibase = os.path.join(base_dir, "coreset")
    obase = os.path.join(base_dir, "example")
    for name in os.listdir(ibase):
        prepare_scripts(name, input_base=ibase, output_base=obase)

    ibase = os.path.join(base_dir, "refined-set")
    for name in os.listdir(ibase):
        prepare_scripts(name, input_base=ibase, output_base=obase)

    ibase = os.path.join(base_dir, "general-set-except-refined")
    for name in os.listdir(ibase):
        prepare_scripts(name, input_base=ibase, output_base=obase)


def prepare_single_complex_ign():
    """

    :return:
    """
    print('\n')
    ibase = os.path.join(base_dir, "coreset")
    obase = os.path.join(base_dir, "example")
    for name in os.listdir(ibase):
        prepare_single_complex_from_pocket_by_index(name, input_base=ibase, output_base=obase)

    ibase = os.path.join(base_dir, "refined-set")
    for name in os.listdir(ibase):
        prepare_single_complex_from_pocket_by_index(name, input_base=ibase, output_base=obase)

    ibase = os.path.join(base_dir, "general-set-except-refined")
    for name in os.listdir(ibase):
        prepare_single_complex_from_pocket_by_index(name, input_base=ibase, output_base=obase)


def test():
    prepare_scripts_ign()


if __name__ == '__main__':
    test()
